# 序列：内容连续、有序，可使用下标索引的一类数据容器
# 列表、元组、字符串，均可视为序列，即、序列可视为列表、元组、字符串的统称
# 序列的常用操作--切片
# 序列支持切片，即：列表、元组、字符串，均支持进行切片操作
# 切片：从一个序列中，取出一个子序列
# 语法：序列[起始下标:结束下标:步长]，表示从序列中，从指定位置开始，依次取出元素，到指定位置结束，得到一个新序列
# 起始下标和结束下标（不含）都可以留空，视作从头开始和截取到结尾；
# 步长表示依次取出元素的间隔：步长N表示，每次跳过N-1个元素取值；步长为负数，表示反向取值（注意，起始下标和结束下标也要反向标记）
# 同样，操作不会影响序列本身，而是会得到一个新的序列(列表、元组、字符串)

# 1.对list进行切片，从1开始，4结束，步长1
my_list = [0, 1, 2, 3, 4, 5, 6]
result1 = my_list[1:4]   # my_list[1:4:1]，默认步长为1，所以可以省略
print(f"结果1:{result1}")

# 2.对tuple(元组)进行切片，从头开始，到最后结束，步长1
my_tuple = (0, 1, 2, 3, 4, 5, 6)
result2 = my_tuple[:]   # 起始和结尾不写表示从头到尾，步长为1可以省略
print(f"结果2:{result2}")

# 3.对str(字符串)进行切片，从头开始，到最后结束，步长2
my_str = "01234567"
result3 = my_str[::2]
print(f"结果3:{result3}")

# 4.对str进行切片，从头开始，到最后结束，步长-1
result4 = my_str[::-1]
print(f"结果4:{result4}")

# 5.对列表进行切片，从3开始，到1结束，步长-1
my_list = [0, 1, 2, 3, 4, 5, 6]
result5 = my_list[3:1:-1]
print(f"结果5:{result5}")

# 6.对元组进行切片，从头开始，到尾结束 步长-2:  由于步长是-2,负数,负数表示倒序进行,从6开始,0结束!
my_tuple = (0, 1, 2, 3, 4, 5, 6)
result6 = my_tuple[::-2]
print(f"结果6:{result6}")

result7 = my_tuple[-5:-1]
print(f"结果6:{result7}")

